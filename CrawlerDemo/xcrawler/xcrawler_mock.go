// Code generated by MockGen. DO NOT EDIT.
// Source: xcrawler.go

// Package xcrawler is a generated GoMock package.
package xcrawler

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrawler is a mock of Crawler interface
type MockCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerMockRecorder
}

// MockCrawlerMockRecorder is the mock recorder for MockCrawler
type MockCrawlerMockRecorder struct {
	mock *MockCrawler
}

// NewMockCrawler creates a new mock instance
func NewMockCrawler(ctrl *gomock.Controller) *MockCrawler {
	mock := &MockCrawler{ctrl: ctrl}
	mock.recorder = &MockCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrawler) EXPECT() *MockCrawlerMockRecorder {
	return m.recorder
}

// Visit mocks base method
func (m *MockCrawler) Visit(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Visit", url)
}

// Visit indicates an expected call of Visit
func (mr *MockCrawlerMockRecorder) Visit(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockCrawler)(nil).Visit), url)
}

// GetHost mocks base method
func (m *MockCrawler) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost
func (mr *MockCrawlerMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockCrawler)(nil).GetHost))
}

// AddHTMLHandler mocks base method
func (m *MockCrawler) AddHTMLHandler(handler HTMLHandler, filters ...HTMLFilter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{handler}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddHTMLHandler", varargs...)
}

// AddHTMLHandler indicates an expected call of AddHTMLHandler
func (mr *MockCrawlerMockRecorder) AddHTMLHandler(handler interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{handler}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHTMLHandler", reflect.TypeOf((*MockCrawler)(nil).AddHTMLHandler), varargs...)
}
