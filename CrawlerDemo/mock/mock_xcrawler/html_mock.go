// Code generated by MockGen. DO NOT EDIT.
// Source: .\xcrawler\html.go

// Package mock_xcrawler is a generated GoMock package.
package mock_xcrawler

import (
	gomock "github.com/golang/mock/gomock"
	xcrawler "github.com/pantskun/golearn/CrawlerDemo/xcrawler"
	html "golang.org/x/net/html"
	atom "golang.org/x/net/html/atom"
	reflect "reflect"
)

// MockHTMLElement is a mock of HTMLElement interface
type MockHTMLElement struct {
	ctrl     *gomock.Controller
	recorder *MockHTMLElementMockRecorder
}

// MockHTMLElementMockRecorder is the mock recorder for MockHTMLElement
type MockHTMLElementMockRecorder struct {
	mock *MockHTMLElement
}

// NewMockHTMLElement creates a new mock instance
func NewMockHTMLElement(ctrl *gomock.Controller) *MockHTMLElement {
	mock := &MockHTMLElement{ctrl: ctrl}
	mock.recorder = &MockHTMLElementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTMLElement) EXPECT() *MockHTMLElementMockRecorder {
	return m.recorder
}

// Equal mocks base method
func (m *MockHTMLElement) Equal(arg0 xcrawler.HTMLElement) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockHTMLElementMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockHTMLElement)(nil).Equal), arg0)
}

// GetParent mocks base method
func (m *MockHTMLElement) GetParent() xcrawler.HTMLElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent")
	ret0, _ := ret[0].(xcrawler.HTMLElement)
	return ret0
}

// GetParent indicates an expected call of GetParent
func (mr *MockHTMLElementMockRecorder) GetParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockHTMLElement)(nil).GetParent))
}

// GetFirstChild mocks base method
func (m *MockHTMLElement) GetFirstChild() xcrawler.HTMLElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstChild")
	ret0, _ := ret[0].(xcrawler.HTMLElement)
	return ret0
}

// GetFirstChild indicates an expected call of GetFirstChild
func (mr *MockHTMLElementMockRecorder) GetFirstChild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstChild", reflect.TypeOf((*MockHTMLElement)(nil).GetFirstChild))
}

// GetLastChild mocks base method
func (m *MockHTMLElement) GetLastChild() xcrawler.HTMLElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChild")
	ret0, _ := ret[0].(xcrawler.HTMLElement)
	return ret0
}

// GetLastChild indicates an expected call of GetLastChild
func (mr *MockHTMLElementMockRecorder) GetLastChild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChild", reflect.TypeOf((*MockHTMLElement)(nil).GetLastChild))
}

// GetPrevSibling mocks base method
func (m *MockHTMLElement) GetPrevSibling() xcrawler.HTMLElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevSibling")
	ret0, _ := ret[0].(xcrawler.HTMLElement)
	return ret0
}

// GetPrevSibling indicates an expected call of GetPrevSibling
func (mr *MockHTMLElementMockRecorder) GetPrevSibling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevSibling", reflect.TypeOf((*MockHTMLElement)(nil).GetPrevSibling))
}

// GetNextSibling mocks base method
func (m *MockHTMLElement) GetNextSibling() xcrawler.HTMLElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextSibling")
	ret0, _ := ret[0].(xcrawler.HTMLElement)
	return ret0
}

// GetNextSibling indicates an expected call of GetNextSibling
func (mr *MockHTMLElementMockRecorder) GetNextSibling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextSibling", reflect.TypeOf((*MockHTMLElement)(nil).GetNextSibling))
}

// GetType mocks base method
func (m *MockHTMLElement) GetType() html.NodeType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(html.NodeType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockHTMLElementMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockHTMLElement)(nil).GetType))
}

// GetDataAtom mocks base method
func (m *MockHTMLElement) GetDataAtom() atom.Atom {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataAtom")
	ret0, _ := ret[0].(atom.Atom)
	return ret0
}

// GetDataAtom indicates an expected call of GetDataAtom
func (mr *MockHTMLElementMockRecorder) GetDataAtom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAtom", reflect.TypeOf((*MockHTMLElement)(nil).GetDataAtom))
}

// GetData mocks base method
func (m *MockHTMLElement) GetData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockHTMLElementMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockHTMLElement)(nil).GetData))
}

// GetNamespace mocks base method
func (m *MockHTMLElement) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockHTMLElementMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockHTMLElement)(nil).GetNamespace))
}

// GetAttr mocks base method
func (m *MockHTMLElement) GetAttr(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttr", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAttr indicates an expected call of GetAttr
func (mr *MockHTMLElementMockRecorder) GetAttr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttr", reflect.TypeOf((*MockHTMLElement)(nil).GetAttr), arg0)
}

// GetRequest mocks base method
func (m *MockHTMLElement) GetRequest() xcrawler.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(xcrawler.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest
func (mr *MockHTMLElementMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockHTMLElement)(nil).GetRequest))
}
